;; ** Variables ***********************************************************************

;; Profile vars
(defvar IMAGE "images/profile.jpg")
(defvar NAME "Raul Gavris | ")

;; System vars
(defpoll CPU_USAGE :interval "1s" `scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `scripts/sys_info --mem`)
(defpoll BLIGHT :interval "1s" `scripts/sys_info --blight`)
(defpoll BATTERY :interval "1s" `scripts/sys_info --bat`)
(defpoll VOLUME :interval "1s" `scripts/sys_info --vol`)
(defpoll UPTIME :interval "10m" `scripts/sys_info --uptime`)
(defpoll WIFI :interval "10m" `scripts/sys_info --wifi`)
(defpoll UPDATES :interval "10m" `scripts/sys_info --updates`)

;; Time vars
(defpoll HOURDATE :interval "1s" `date +"ÔÄó %I : %M : %S %p %A"`)

;; Files remaining vars
(defpoll FREE :interval "5s" `df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'`)

(deflisten music
  :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }} | {{ duration(position) }} - {{ duration(mpris:length) }} | {{status}}' || true")

(deflisten workspaces_listen
  "scripts/sys_info --workspaces"
)

(defwidget workspaces []
  (literal :content workspaces_listen)
)

;; system
(defwidget system [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(box :orientation "h" :spacing 5 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :class "cpu_bar" :orientation "h" :spacing 5 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconcpu" :text "Ó•ê")
				(scale :min 0 :max 100 :value CPU_USAGE :active "false"))
			(box :class "mem_bar" :orientation "h" :spacing 5 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconmem" :text "Ó¶π")
				(scale :min 0 :max 100 :value MEM_USAGE :active "false"))
			(box :class "bright_bar" :orientation "h" :spacing 5 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbright" :text "Óß£")
				(scale :min 0 :max 100 :value BLIGHT :active "true" :onchange "brightnessctl set {}%" ))
			(box :class "bat_bar" :orientation "h" :spacing 5 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbat" :text "Ó§ú")
				(scale :min 0 :max 100 :value BATTERY :active "false"))
      (box :class "vol_bar" :orientation "h" :spacing 5 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconvol" :text "ÔÄ®")
				(scale :min 0 :max 100 :value VOLUME :active "true" :onchange "")))))

(defwidget music []
  (box :class "music"
    :orientation "h"
    :space-evenly false
    :halign "center"
    {music != "" ? "üéµ${music}" : "music"}
  )
)

;; info
(defwidget centerdown []
  (box :class "center" :orientation "h" :space-evenly false :halign "center" :spacing 10
    (box :orientation "h" :spacing 5 :space-evenly false :halign "center"
      (music)
    )
  )
)

;; info
(defwidget center []
  (box :class "genwin" :vexpand "false" :hexpand "false" 
    (box :class "center" :orientation "h" :space-evenly false :halign "center" :spacing 10
      (box :orientation "h" :spacing 5 :space-evenly false :halign "center"
        NAME
        (workspaces)
      )
    )
  )
)

;; info
(defwidget left []
  (box :class "left" :orientation "h" :space-evenly false :halign "begin" :spacing 10
    (box :orientation "h" :spacing 5 :space-evenly false :halign "begin"
      (system)
    )
  )
)

; (defvar var false)
; (defwidget right []
;   (eventbox :onhover "/usr/local/bin/eww update var=true"   
;   			:onhoverlost "/usr/local/bin/eww update var=false"
;         :class "eventbox"
;   			(box    :orientation "h"  
; 			  		:space-evenly "false"  
; 					:spacing 2
;   			(revealer :transition "slideleft" 
; 			  		  :reveal var   
; 					  :duration "550ms"
;           "reveal")
;   			(label :class "brightness-icon" 
; 			  	   :text "label"))))

(defwidget clock []
  (box :orientation "h" :spacing 5 :space-evenly false :halign "end"
    HOURDATE "|"
  )
)

(defwidget uptime []
  (box :orientation "h" :spacing 5 :space-evenly false :halign "end"
    UPTIME "| "
  )
)

(defwidget memoryfree []
  (box :orientation "h" :spacing 5 :space-evenly false :halign "end"
    FREE "| "
  )
)

(defwidget updates []
  (box :orientation "h" :spacing 5 :space-evenly false :halign "end"
    "ÔÄô "UPDATES "| "
  )
)

(defwidget wifi []
  (box :orientation "h" :spacing 5 :space-evenly false :halign "end"
    "Ôá´ "WIFI "| "
  )
)

(defwidget powermenu []
  (box :orientation "h" :spacing 5 :space-evenly false :halign "end"
    "ÔÄë "
  )
)
;; info
(defwidget right []
  (box :class "genwin" :vexpand "false" :hexpand "false" 
    (box :class "right" :orientation "h" :space-evenly false :halign "end" :spacing 1
      (box :orientation "h" :spacing 5 :space-evenly false :halign "end"
      (clock)
      (uptime)
      (memoryfree)
      (updates)
      (wifi)
      (powermenu)
      )
    )
  )
)

(defwindow left
  :stacking "bg"
  :focusable "false"
  :screen 1 
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "1%"
                      :y "1%"
                      :width "100%"
                      :height "25px"
                      :anchor "top left")
  :reserve (struts :side "top" :distance "3%")
  (left)
)

(defwindow center
  :stacking "bg"
  :focusable "false"
  :screen 1 
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "-5%"
                      :y "1%"
                      :width "15%"
                      :height "25px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "3%")
  (center)
)

(defwindow right
  :stacking "bg"
  :focusable "false"
  :screen 1 
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "-1%"
                      :y "1%"
                      :width "20%"
                      :height "25px"
                      :anchor "top right")
  :reserve (struts :side "top" :distance "3%")
  (right)
)
