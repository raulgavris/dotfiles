#!/bin/bash

## Files and Data
PREV_TOTAL=0
PREV_IDLE=0
cpuFile="/tmp/.cpu_usage"

## Get CPU usage
get_cpu() {
	if [[ -f "${cpuFile}" ]]; then
		fileCont=$(cat "${cpuFile}")
		PREV_TOTAL=$(echo "${fileCont}" | head -n 1)
		PREV_IDLE=$(echo "${fileCont}" | tail -n 1)
	fi

	CPU=(`cat /proc/stat | grep '^cpu '`) # Get the total CPU statistics.
	unset CPU[0]                          # Discard the "cpu" prefix.
	IDLE=${CPU[4]}                        # Get the idle CPU time.

	# Calculate the total CPU time.
	TOTAL=0

	for VALUE in "${CPU[@]:0:4}"; do
		let "TOTAL=$TOTAL+$VALUE"
	done

	if [[ "${PREV_TOTAL}" != "" ]] && [[ "${PREV_IDLE}" != "" ]]; then
		# Calculate the CPU usage since we last checked.
		let "DIFF_IDLE=$IDLE-$PREV_IDLE"
		let "DIFF_TOTAL=$TOTAL-$PREV_TOTAL"
		let "DIFF_USAGE=(1000*($DIFF_TOTAL-$DIFF_IDLE)/$DIFF_TOTAL+5)/10"
		echo "${DIFF_USAGE}"
	else
		echo "?"
	fi

	# Remember the total and idle CPU times for the next check.
	echo "${TOTAL}" > "${cpuFile}"
	echo "${IDLE}" >> "${cpuFile}"
}

## Get Used memory
get_mem() {
	printf "%.0f\n" $(free -m | grep Mem | awk '{print ($3/$2)*100}')
}

## Get Brightness
get_blight() {
	CARD=`ls /sys/class/backlight | head -n 1`

	if [[ "$CARD" == *"intel_"* ]]; then
		BNESS=`brightnessctl info`
		regex="[0-9]+%"
		if [[ $BNESS =~ $regex ]]
			then
				BNESS="${BASH_REMATCH[0]}"
				BNESS="${BNESS/\%/}"
		fi
		LIGHT=${BNESS%.*}
	else
		BNESS=`blight -d $CARD get brightness`
		PERC="$(($BNESS*100/255))"
		LIGHT=${PERC%.*}
	fi

	echo "$LIGHT"
}

## Get Battery 
battery() {
	BAT=`ls /sys/class/power_supply | grep BAT | head -n 1`
	cat /sys/class/power_supply/${BAT}/capacity
}
battery_stat() {
	BAT=`ls /sys/class/power_supply | grep BAT | head -n 1`
	cat /sys/class/power_supply/${BAT}/status
}

## Get Volume
get_volume() {
	VOL=`pactl list sinks | grep '^[[:space:]]Volume:' | head -n $(( $SINK + 1 )) | tail -n 1 | sed -e 's,.* \([0-9][0-9]*\)%.*,\1,'`
	if [[ "$VOL" -ge "100" ]]; then
		VOL="100"
		pactl set-sink-volume 0 100%
	fi
	echo $VOL
}

## Get Uptime
get_uptime() {
	UPTIME=`uptime --pretty | sed 's/up //' | sed 's/\ years\?,/y/' | sed 's/\ weeks\?,/w/' | sed 's/\ days\?,/d/' | sed 's/\ hours\?,\?/h/' | sed 's/\ minutes\?/m/'`
	echo $UPTIME
}

get_wifi_name() {
	WIFI=`iwgetid -r`
	echo $WIFI
}

get_updates() {
	UPDATES=`checkupdates 2>/dev/null | wc -l`
	echo "$UPDATES updates"
}

## Workspaces
give_ws_yuck() {
	wmctrl -d | awk '{ print $1 " " $2 " " $10 }' | while read -r id active; do
		icon=$id
		if [ "$id" == 0 ]; then
			icon=""
		fi
		if [ "$id" == 1 ]; then
			icon=""
		fi
		if [ "$id" == 2 ]; then
			icon=""
		fi
		if [ "$id" == 3 ]; then
			icon=""
		fi
		if [ "$id" == 4 ]; then
			icon=""
		fi
		if [ "$id" == 5 ]; then
			icon=""
		fi
		if [ "$id" == 6 ]; then
			continue
			icon=""
		fi
		if [ "$id" == 7 ]; then
			continue
			icon=""
		fi
		if [ "$id" == 8 ]; then
			continue
			icon=""
		fi
		if [ "$active" == "*" ]; then
			button_class="active_wsp"
		elif wmctrl -l | grep --regexp '.*\s\+'"$id"'\s\+.*' >/dev/null; then
			button_class="full_wsp"
		else
			button_class="inactive_wsp"
		fi
    	echo -n " (button :class \"workspace$id $button_class\" :orientation \"h\" :spacing 1 :space-evenly \"false\" :vexpand \"false\" :hexpand \"false\" :onclick \"wmctrl -s $id\" \"$icon\") " 
	done
}

give_ws_widget() {
	xprop -spy -root _NET_CURRENT_DESKTOP | while read -r; do
    	echo " (box :class \"workspaces\" :vexpand \"false\" :hexpand \"false\" (box :orientation \"h\" :spacing 1 :halign \"center\" :valign \"center\" :space-evenly \"false\" :vexpand \"false\" :hexpand \"false\" $(give_ws_yuck) ) ) "
	done
}
## End Workspaces

## Execute accordingly
if [[ "$1" == "--cpu" ]]; then
	get_cpu
elif [[ "$1" == "--mem" ]]; then
	get_mem
elif [[ "$1" == "--blight" ]]; then
	get_blight
elif [[ "$1" == "--bat" ]]; then
	battery
elif [[ "$1" == "--vol" ]]; then
	get_volume
elif [[ "$1" == "--uptime" ]]; then
	get_uptime
elif [[ "$1" == "--wifi" ]]; then
	get_wifi_name
elif [[ "$1" == "--updates" ]]; then
	get_updates
elif [[ "$1" == "--workspaces" ]]; then
	give_ws_widget
fi
